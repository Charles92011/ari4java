(ns codegen3.sample-db
  (:require
    [clojure.test :refer :all]
    [com.rpl.specter :as sr]))


(def DB
  {:ari_0_0_1 {:applications {:swaggerVersion "1.1",
                                    :resourcePath "/api-docs/applications.{format}",
                                    :_svn_revision "$Revision: 403134 $",
                                    :models {:Application {:id "Application",
                                                           :description "Details of a Stasis application",
                                                           :properties {:name {:type "string",
                                                                               :description "Name of this application",
                                                                               :required true},
                                                                        :channel_ids {:type "List[string]",
                                                                                      :description "Id's for channels subscribed to.",
                                                                                      :required true},
                                                                        :bridge_ids {:type "List[string]",
                                                                                     :description "Id's for bridges subscribed to.",
                                                                                     :required true},
                                                                        :endpoint_ids {:type "List[string]",
                                                                                       :description "{tech}/{resource} for endpoints subscribed to.",
                                                                                       :required true},
                                                                        :device_names {:type "List[string]",
                                                                                       :description "Names of the devices subscribed to.",
                                                                                       :required true}}}},
                                    :_author "David M. Lee, II <dlee@digium.com>",
                                    :apis [{:path "/applications",
                                            :description "Stasis applications",
                                            :operations [{:httpMethod "GET",
                                                          :summary "List all applications.",
                                                          :nickname "list",
                                                          :responseClass "List[Application]"}]}
                                           {:path "/applications/{applicationName}",
                                            :description "Stasis application",
                                            :operations [{:httpMethod "GET",
                                                          :summary "Get details of an application.",
                                                          :nickname "get",
                                                          :responseClass "Application",
                                                          :parameters [{:name "applicationName",
                                                                        :description "Application's name",
                                                                        :paramType "path",
                                                                        :required true,
                                                                        :allowMultiple false,
                                                                        :dataType "string"}],
                                                          :errorResponses [{:code 404, :reason "Application does not exist."}]}]}
                                           {:path "/applications/{applicationName}/subscription",
                                            :description "Stasis application",
                                            :operations [{:httpMethod "POST",
                                                          :summary "Subscribe an application to a event source.",
                                                          :notes "Returns the state of the application after the subscriptions have changed",
                                                          :nickname "subscribe",
                                                          :responseClass "Application",
                                                          :parameters [{:name "applicationName",
                                                                        :description "Application's name",
                                                                        :paramType "path",
                                                                        :required true,
                                                                        :allowMultiple false,
                                                                        :dataType "string"}
                                                                       {:name "eventSource",
                                                                        :description "URI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}/{resource}, deviceState:{deviceName}",
                                                                        :paramType "query",
                                                                        :required true,
                                                                        :allowMultiple true,
                                                                        :dataType "string"}],
                                                          :errorResponses [{:code 400, :reason "Missing parameter."}
                                                                           {:code 404, :reason "Application does not exist."}
                                                                           {:code 422, :reason "Event source does not exist."}]}
                                                         {:httpMethod "DELETE",
                                                          :summary "Unsubscribe an application from an event source.",
                                                          :notes "Returns the state of the application after the subscriptions have changed",
                                                          :nickname "unsubscribe",
                                                          :responseClass "Application",
                                                          :parameters [{:name "applicationName",
                                                                        :description "Application's name",
                                                                        :paramType "path",
                                                                        :required true,
                                                                        :allowMultiple false,
                                                                        :dataType "string"}
                                                                       {:name "eventSource",
                                                                        :description "URI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}/{resource}, device_state:{deviceName}",
                                                                        :paramType "query",
                                                                        :required true,
                                                                        :allowMultiple true,
                                                                        :dataType "string"}],
                                                          :errorResponses [{:code 400,
                                                                            :reason "Missing parameter; event source scheme not recognized."}
                                                                           {:code 404, :reason "Application does not exist."}
                                                                           {:code 409,
                                                                            :reason "Application not subscribed to event source."}
                                                                           {:code 422, :reason "Event source does not exist."}]}]}],
                                    :_copyright "Copyright (C) 2013, Digium, Inc.",
                                    :apiVersion "0.0.1",
                                    :basePath "http://localhost:8088/stasis"},
                     :events {:swaggerVersion "1.2",
                              :resourcePath "/api-docs/events.{format}",
                              :_svn_revision "$Revision: 403134 $",
                              :models {:ChannelCallerId {:id "ChannelCallerId",
                                                         :description "Channel changed Caller ID.",
                                                         :properties {:caller_presentation {:required true,
                                                                                            :type "int",
                                                                                            :description "The integer representation of the Caller Presentation value."},
                                                                      :caller_presentation_txt {:required true,
                                                                                                :type "string",
                                                                                                :description "The text representation of the Caller Presentation value."},
                                                                      :channel {:required true,
                                                                                :type "Channel",
                                                                                :description "The channel that changed Caller ID."}}},
                                       :ChannelVarset {:id "ChannelVarset",
                                                       :description "Channel variable changed.",
                                                       :properties {:variable {:required true,
                                                                               :type "string",
                                                                               :description "The variable that changed."},
                                                                    :value {:required true,
                                                                            :type "string",
                                                                            :description "The new value of the variable."},
                                                                    :channel {:required false,
                                                                              :type "Channel",
                                                                              :description "The channel on which the variable was set.

                                                                                    If missing, the variable is a global variable."}}},
                                       :StasisEnd {:id "StasisEnd",
                                                   :description "Notification that a channel has left a Stasis application.",
                                                   :properties {:channel {:required true, :type "Channel"}}},
                                       :Message {:id "Message",
                                                 :description "Base type for errors and events",
                                                 :discriminator "type",
                                                 :properties {:type {:type "string",
                                                                     :required true,
                                                                     :description "Indicates the type of this message."}},
                                                 :subTypes ["MissingParams" "Event"]},
                                       :ChannelDialplan {:id "ChannelDialplan",
                                                         :description "Channel changed location in the dialplan.",
                                                         :properties {:channel {:required true,
                                                                                :type "Channel",
                                                                                :description "The channel that changed dialplan location."},
                                                                      :dialplan_app {:required true,
                                                                                     :type "string",
                                                                                     :description "The application about to be executed."},
                                                                      :dialplan_app_data {:required true,
                                                                                          :type "string",
                                                                                          :description "The data to be passed to the application."}}},
                                       :MissingParams {:id "MissingParams",
                                                       :description "Error event sent when required params are missing.",
                                                       :properties {:params {:required true,
                                                                             :type "List[string]",
                                                                             :description "A list of the missing parameters"}}},
                                       :ChannelLeftBridge {:id "ChannelLeftBridge",
                                                           :description "Notification that a channel has left a bridge.",
                                                           :properties {:bridge {:required true, :type "Bridge"},
                                                                        :channel {:required true, :type "Channel"}}},
                                       :ChannelDtmfReceived {:id "ChannelDtmfReceived",
                                                             :description "DTMF received on a channel.

                                                                   This event is sent when the DTMF ends. There is no notification about the start of DTMF",
                                                             :properties {:digit {:required true,
                                                                                  :type "string",
                                                                                  :description "DTMF digit received (0-9, A-E, # or *)"},
                                                                          :duration_ms {:required true,
                                                                                        :type "int",
                                                                                        :description "Number of milliseconds DTMF was received"},
                                                                          :channel {:required true,
                                                                                    :type "Channel",
                                                                                    :description "The channel on which DTMF was received"}}},
                                       :StasisStart {:id "StasisStart",
                                                     :description "Notification that a channel has entered a Stasis application.",
                                                     :properties {:args {:required true,
                                                                         :type "List[string]",
                                                                         :description "Arguments to the application"},
                                                                  :channel {:required true, :type "Channel"}}},
                                       :ChannelStateChange {:id "ChannelStateChange",
                                                            :description "Notification of a channel's state change.",
                                                            :properties {:channel {:required true, :type "Channel"}}},
                                       :ChannelEnteredBridge {:id "ChannelEnteredBridge",
                                                              :description "Notification that a channel has entered a bridge.",
                                                              :properties {:bridge {:required true, :type "Bridge"},
                                                                           :channel {:type "Channel"}}},
                                       :Event {:id "Event",
                                               :description "Base type for asynchronous events from Asterisk.",
                                               :properties {:application {:type "string",
                                                                          :description "Name of the application receiving the event.",
                                                                          :required true},
                                                            :timestamp {:type "Date",
                                                                        :description "Time at which this event was created.",
                                                                        :required false}},
                                               :subTypes ["DeviceStateChanged"
                                                          "PlaybackStarted"
                                                          "PlaybackFinished"
                                                          "ApplicationReplaced"
                                                          "BridgeCreated"
                                                          "BridgeDestroyed"
                                                          "BridgeMerged"
                                                          "ChannelCreated"
                                                          "ChannelDestroyed"
                                                          "ChannelEnteredBridge"
                                                          "ChannelLeftBridge"
                                                          "ChannelStateChange"
                                                          "ChannelDtmfReceived"
                                                          "ChannelDialplan"
                                                          "ChannelCallerId"
                                                          "ChannelUserevent"
                                                          "ChannelHangupRequest"
                                                          "ChannelVarset"
                                                          "EndpointStateChange"
                                                          "StasisEnd"
                                                          "StasisStart"]},
                                       :PlaybackStarted {:id "PlaybackStarted",
                                                         :description "Event showing the start of a media playback operation.",
                                                         :properties {:playback {:type "Playback",
                                                                                 :description "Playback control object",
                                                                                 :required true}}},
                                       :RecordingStarted {:id "RecordingStarted",
                                                          :extends "Event",
                                                          :description "Event showing the start of a recording operation.",
                                                          :properties {:recording {:type "LiveRecording",
                                                                                   :description "Recording control object",
                                                                                   :required true}}},
                                       :ChannelHangupRequest {:id "ChannelHangupRequest",
                                                              :description "A hangup was requested on the channel.",
                                                              :properties {:cause {:type "int",
                                                                                   :description "Integer representation of the cause of the hangup."},
                                                                           :soft {:type "boolean",
                                                                                  :description "Whether the hangup request was a soft hangup request."},
                                                                           :channel {:required true,
                                                                                     :type "Channel",
                                                                                     :description "The channel on which the hangup was requested."}}},
                                       :RecordingFinished {:id "RecordingFinished",
                                                           :extends "Event",
                                                           :description "Event showing the completion of a recording operation.",
                                                           :properties {:recording {:type "LiveRecording",
                                                                                    :description "Recording control object",
                                                                                    :required true}}},
                                       :DeviceStateChanged {:id "DeviceStateChanged",
                                                            :description "Notification that a device state has changed.",
                                                            :properties {:device_state {:type "DeviceState",
                                                                                        :description "Device state object",
                                                                                        :required true}}},
                                       :BridgeCreated {:id "BridgeCreated",
                                                       :description "Notification that a bridge has been created.",
                                                       :properties {:bridge {:required true, :type "Bridge"}}},
                                       :ApplicationReplaced {:id "ApplicationReplaced",
                                                             :description "Notification that another WebSocket has taken over for an application.

                                                                   An application may only be subscribed to by a single WebSocket at a time. If multiple WebSockets attempt to subscribe to the same application, the newer WebSocket wins, and the older one receives this event.",
                                                             :properties {}},
                                       :BridgeMerged {:id "BridgeMerged",
                                                      :description "Notification that one bridge has merged into another.",
                                                      :properties {:bridge {:required true, :type "Bridge"},
                                                                   :bridge_from {:required true, :type "Bridge"}}},
                                       :ChannelCreated {:id "ChannelCreated",
                                                        :description "Notification that a channel has been created.",
                                                        :properties {:channel {:required true, :type "Channel"}}},
                                       :BridgeDestroyed {:id "BridgeDestroyed",
                                                         :description "Notification that a bridge has been destroyed.",
                                                         :properties {:bridge {:required true, :type "Bridge"}}},
                                       :RecordingFailed {:id "RecordingFailed",
                                                         :extends "Event",
                                                         :description "Event showing failure of a recording operation.",
                                                         :properties {:recording {:type "LiveRecording",
                                                                                  :description "Recording control object",
                                                                                  :required true}}},
                                       :ChannelUserevent {:id "ChannelUserevent",
                                                          :description "User-generated event with additional user-defined fields in the object.",
                                                          :properties {:eventname {:required true,
                                                                                   :type "string",
                                                                                   :description "The name of the user event."},
                                                                       :channel {:required true,
                                                                                 :type "Channel",
                                                                                 :description "The channel that signaled the user event."},
                                                                       :userevent {:required true,
                                                                                   :type "object",
                                                                                   :description "Custom Userevent data"}}},
                                       :EndpointStateChange {:id "EndpointStateChange",
                                                             :description "Endpoint state changed.",
                                                             :properties {:endpoint {:required true, :type "Endpoint"}}},
                                       :ChannelDestroyed {:id "ChannelDestroyed",
                                                          :description "Notification that a channel has been destroyed.",
                                                          :properties {:cause {:required true,
                                                                               :description "Integer representation of the cause of the hangup",
                                                                               :type "int"},
                                                                       :cause_txt {:required true,
                                                                                   :description "Text representation of the cause of the hangup",
                                                                                   :type "string"},
                                                                       :channel {:required true, :type "Channel"}}},
                                       :PlaybackFinished {:id "PlaybackFinished",
                                                          :description "Event showing the completion of a media playback operation.",
                                                          :properties {:playback {:type "Playback",
                                                                                  :description "Playback control object",
                                                                                  :required true}}}},
                              :_author "David M. Lee, II <dlee@digium.com>",
                              :apis [{:path "/events",
                                      :description "Events from Asterisk to applications",
                                      :operations [{:httpMethod "GET",
                                                    :upgrade "websocket",
                                                    :websocketProtocol "ari",
                                                    :summary "WebSocket connection for events.",
                                                    :nickname "eventWebsocket",
                                                    :responseClass "Message",
                                                    :parameters [{:name "app",
                                                                  :description "Applications to subscribe to.",
                                                                  :paramType "query",
                                                                  :required true,
                                                                  :allowMultiple true,
                                                                  :dataType "string"}]}]}],
                              :_copyright "Copyright (C) 2012 - 2013, Digium, Inc.",
                              :apiVersion "0.0.1",
                              :basePath "http://localhost:8088/stasis"}},
         :ari_1_0_0 {:applications {:swaggerVersion "1.1",
                                    :resourcePath "/api-docs/applications.{format}",
                                    :_svn_revision "$Revision: 404509 $",
                                    :models {:Application {:id "Application",
                                                           :description "Details of a Stasis application",
                                                           :properties {:name {:type "string",
                                                                               :description "Name of this application",
                                                                               :required true},
                                                                        :channel_ids {:type "List[string]",
                                                                                      :description "Id's for channels subscribed to.",
                                                                                      :required true},
                                                                        :bridge_ids {:type "List[string]",
                                                                                     :description "Id's for bridges subscribed to.",
                                                                                     :required true},
                                                                        :endpoint_ids {:type "List[string]",
                                                                                       :description "{tech}/{resource} for endpoints subscribed to.",
                                                                                       :required true},
                                                                        :device_names {:type "List[string]",
                                                                                       :description "Names of the devices subscribed to.",
                                                                                       :required true}}}},
                                    :_author "David M. Lee, II <dlee@digium.com>",
                                    :apis [{:path "/applications",
                                            :description "Stasis applications",
                                            :operations [{:httpMethod "GET",
                                                          :summary "List all applications.",
                                                          :nickname "list",
                                                          :responseClass "List[Application]"}]}
                                           {:path "/applications/{applicationName}",
                                            :description "Stasis application",
                                            :operations [{:httpMethod "GET",
                                                          :summary "Get details of an application.",
                                                          :nickname "get",
                                                          :responseClass "Application",
                                                          :parameters [{:name "applicationName",
                                                                        :description "Application's name",
                                                                        :paramType "path",
                                                                        :required true,
                                                                        :allowMultiple false,
                                                                        :dataType "string"}],
                                                          :errorResponses [{:code 404, :reason "Application does not exist."}]}]}
                                           {:path "/applications/{applicationName}/subscription",
                                            :description "Stasis application",
                                            :operations [{:httpMethod "POST",
                                                          :summary "Subscribe an application to a event source.",
                                                          :notes "Returns the state of the application after the subscriptions have changed",
                                                          :nickname "subscribe",
                                                          :responseClass "Application",
                                                          :parameters [{:name "applicationName",
                                                                        :description "Application's name",
                                                                        :paramType "path",
                                                                        :required true,
                                                                        :allowMultiple false,
                                                                        :dataType "string"}
                                                                       {:name "eventSource",
                                                                        :description "URI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}/{resource}, deviceState:{deviceName}",
                                                                        :paramType "query",
                                                                        :required true,
                                                                        :allowMultiple true,
                                                                        :dataType "string"}],
                                                          :errorResponses [{:code 400, :reason "Missing parameter."}
                                                                           {:code 404, :reason "Application does not exist."}
                                                                           {:code 422, :reason "Event source does not exist."}]}
                                                         {:httpMethod "DELETE",
                                                          :summary "Unsubscribe an application from an event source.",
                                                          :notes "Returns the state of the application after the subscriptions have changed",
                                                          :nickname "unsubscribe",
                                                          :responseClass "Application",
                                                          :parameters [{:name "applicationName",
                                                                        :description "Application's name",
                                                                        :paramType "path",
                                                                        :required true,
                                                                        :allowMultiple false,
                                                                        :dataType "string"}
                                                                       {:name "eventSource",
                                                                        :description "URI for event source (channel:{channelId}, bridge:{bridgeId}, endpoint:{tech}/{resource}, deviceState:{deviceName}",
                                                                        :paramType "query",
                                                                        :required true,
                                                                        :allowMultiple true,
                                                                        :dataType "string"}],
                                                          :errorResponses [{:code 400,
                                                                            :reason "Missing parameter; event source scheme not recognized."}
                                                                           {:code 404, :reason "Application does not exist."}
                                                                           {:code 409,
                                                                            :reason "Application not subscribed to event source."}
                                                                           {:code 422, :reason "Event source does not exist."}]}]}],
                                    :_copyright "Copyright (C) 2013, Digium, Inc.",
                                    :apiVersion "1.0.0",
                                    :basePath "http://localhost:8088/stasis"},
                     :events {:swaggerVersion "1.2",
                              :resourcePath "/api-docs/events.{format}",
                              :_svn_revision "$Revision: 404184 $",
                              :models {:ChannelCallerId {:id "ChannelCallerId",
                                                         :description "Channel changed Caller ID.",
                                                         :properties {:caller_presentation {:required true,
                                                                                            :type "int",
                                                                                            :description "The integer representation of the Caller Presentation value."},
                                                                      :caller_presentation_txt {:required true,
                                                                                                :type "string",
                                                                                                :description "The text representation of the Caller Presentation value."},
                                                                      :channel {:required true,
                                                                                :type "Channel",
                                                                                :description "The channel that changed Caller ID."}}},
                                       :ChannelVarset {:id "ChannelVarset",
                                                       :description "Channel variable changed.",
                                                       :properties {:variable {:required true,
                                                                               :type "string",
                                                                               :description "The variable that changed."},
                                                                    :value {:required true,
                                                                            :type "string",
                                                                            :description "The new value of the variable."},
                                                                    :channel {:required false,
                                                                              :type "Channel",
                                                                              :description "The channel on which the variable was set.

                                                                                    If missing, the variable is a global variable."}}},
                                       :StasisEnd {:id "StasisEnd",
                                                   :description "Notification that a channel has left a Stasis application.",
                                                   :properties {:channel {:required true, :type "Channel"}}},
                                       :Message {:id "Message",
                                                 :description "Base type for errors and events",
                                                 :discriminator "type",
                                                 :properties {:type {:type "string",
                                                                     :required true,
                                                                     :description "Indicates the type of this message."}},
                                                 :subTypes ["MissingParams" "Event"]},
                                       :ChannelDialplan {:id "ChannelDialplan",
                                                         :description "Channel changed location in the dialplan.",
                                                         :properties {:channel {:required true,
                                                                                :type "Channel",
                                                                                :description "The channel that changed dialplan location."},
                                                                      :dialplan_app {:required true,
                                                                                     :type "string",
                                                                                     :description "The application about to be executed."},
                                                                      :dialplan_app_data {:required true,
                                                                                          :type "string",
                                                                                          :description "The data to be passed to the application."}}},
                                       :MissingParams {:id "MissingParams",
                                                       :description "Error event sent when required params are missing.",
                                                       :properties {:params {:required true,
                                                                             :type "List[string]",
                                                                             :description "A list of the missing parameters"}}},
                                       :ChannelLeftBridge {:id "ChannelLeftBridge",
                                                           :description "Notification that a channel has left a bridge.",
                                                           :properties {:bridge {:required true, :type "Bridge"},
                                                                        :channel {:required true, :type "Channel"}}},
                                       :ChannelDtmfReceived {:id "ChannelDtmfReceived",
                                                             :description "DTMF received on a channel.

                                                                   This event is sent when the DTMF ends. There is no notification about the start of DTMF",
                                                             :properties {:digit {:required true,
                                                                                  :type "string",
                                                                                  :description "DTMF digit received (0-9, A-E, # or *)"},
                                                                          :duration_ms {:required true,
                                                                                        :type "int",
                                                                                        :description "Number of milliseconds DTMF was received"},
                                                                          :channel {:required true,
                                                                                    :type "Channel",
                                                                                    :description "The channel on which DTMF was received"}}},
                                       :StasisStart {:id "StasisStart",
                                                     :description "Notification that a channel has entered a Stasis application.",
                                                     :properties {:args {:required true,
                                                                         :type "List[string]",
                                                                         :description "Arguments to the application"},
                                                                  :channel {:required true, :type "Channel"}}},
                                       :ChannelStateChange {:id "ChannelStateChange",
                                                            :description "Notification of a channel's state change.",
                                                            :properties {:channel {:required true, :type "Channel"}}},
                                       :ChannelEnteredBridge {:id "ChannelEnteredBridge",
                                                              :description "Notification that a channel has entered a bridge.",
                                                              :properties {:bridge {:required true, :type "Bridge"},
                                                                           :channel {:type "Channel"}}},
                                       :Event {:id "Event",
                                               :description "Base type for asynchronous events from Asterisk.",
                                               :properties {:application {:type "string",
                                                                          :description "Name of the application receiving the event.",
                                                                          :required true},
                                                            :timestamp {:type "Date",
                                                                        :description "Time at which this event was created.",
                                                                        :required false}},
                                               :subTypes ["DeviceStateChanged"
                                                          "PlaybackStarted"
                                                          "PlaybackFinished"
                                                          "RecordingStarted"
                                                          "RecordingFinished"
                                                          "RecordingFailed"
                                                          "ApplicationReplaced"
                                                          "BridgeCreated"
                                                          "BridgeDestroyed"
                                                          "BridgeMerged"
                                                          "ChannelCreated"
                                                          "ChannelDestroyed"
                                                          "ChannelEnteredBridge"
                                                          "ChannelLeftBridge"
                                                          "ChannelStateChange"
                                                          "ChannelDtmfReceived"
                                                          "ChannelDialplan"
                                                          "ChannelCallerId"
                                                          "ChannelUserevent"
                                                          "ChannelHangupRequest"
                                                          "ChannelVarset"
                                                          "EndpointStateChange"
                                                          "Dial"
                                                          "StasisEnd"
                                                          "StasisStart"]},
                                       :PlaybackStarted {:id "PlaybackStarted",
                                                         :description "Event showing the start of a media playback operation.",
                                                         :properties {:playback {:type "Playback",
                                                                                 :description "Playback control object",
                                                                                 :required true}}},
                                       :RecordingStarted {:id "RecordingStarted",
                                                          :extends "Event",
                                                          :description "Event showing the start of a recording operation.",
                                                          :properties {:recording {:type "LiveRecording",
                                                                                   :description "Recording control object",
                                                                                   :required true}}},
                                       :ChannelHangupRequest {:id "ChannelHangupRequest",
                                                              :description "A hangup was requested on the channel.",
                                                              :properties {:cause {:type "int",
                                                                                   :description "Integer representation of the cause of the hangup."},
                                                                           :soft {:type "boolean",
                                                                                  :description "Whether the hangup request was a soft hangup request."},
                                                                           :channel {:required true,
                                                                                     :type "Channel",
                                                                                     :description "The channel on which the hangup was requested."}}},
                                       :RecordingFinished {:id "RecordingFinished",
                                                           :extends "Event",
                                                           :description "Event showing the completion of a recording operation.",
                                                           :properties {:recording {:type "LiveRecording",
                                                                                    :description "Recording control object",
                                                                                    :required true}}},
                                       :DeviceStateChanged {:id "DeviceStateChanged",
                                                            :description "Notification that a device state has changed.",
                                                            :properties {:device_state {:type "DeviceState",
                                                                                        :description "Device state object",
                                                                                        :required true}}},
                                       :BridgeCreated {:id "BridgeCreated",
                                                       :description "Notification that a bridge has been created.",
                                                       :properties {:bridge {:required true, :type "Bridge"}}},
                                       :ApplicationReplaced {:id "ApplicationReplaced",
                                                             :description "Notification that another WebSocket has taken over for an application.

                                                                   An application may only be subscribed to by a single WebSocket at a time. If multiple WebSockets attempt to subscribe to the same application, the newer WebSocket wins, and the older one receives this event.",
                                                             :properties {}},
                                       :BridgeMerged {:id "BridgeMerged",
                                                      :description "Notification that one bridge has merged into another.",
                                                      :properties {:bridge {:required true, :type "Bridge"},
                                                                   :bridge_from {:required true, :type "Bridge"}}},
                                       :ChannelCreated {:id "ChannelCreated",
                                                        :description "Notification that a channel has been created.",
                                                        :properties {:channel {:required true, :type "Channel"}}},
                                       :BridgeDestroyed {:id "BridgeDestroyed",
                                                         :description "Notification that a bridge has been destroyed.",
                                                         :properties {:bridge {:required true, :type "Bridge"}}},
                                       :RecordingFailed {:id "RecordingFailed",
                                                         :extends "Event",
                                                         :description "Event showing failure of a recording operation.",
                                                         :properties {:recording {:type "LiveRecording",
                                                                                  :description "Recording control object",
                                                                                  :required true}}},
                                       :ChannelUserevent {:id "ChannelUserevent",
                                                          :description "User-generated event with additional user-defined fields in the object.",
                                                          :properties {:eventname {:required true,
                                                                                   :type "string",
                                                                                   :description "The name of the user event."},
                                                                       :channel {:required true,
                                                                                 :type "Channel",
                                                                                 :description "The channel that signaled the user event."},
                                                                       :userevent {:required true,
                                                                                   :type "object",
                                                                                   :description "Custom Userevent data"}}},
                                       :EndpointStateChange {:id "EndpointStateChange",
                                                             :description "Endpoint state changed.",
                                                             :properties {:endpoint {:required true, :type "Endpoint"}}},
                                       :Dial {:id "Dial",
                                              :description "Dialing state has changed.",
                                              :properties {:caller {:required false,
                                                                    :type "Channel",
                                                                    :description "The calling channel."},
                                                           :peer {:required true,
                                                                  :type "Channel",
                                                                  :description "The dialed channel."},
                                                           :forward {:required false,
                                                                     :type "string",
                                                                     :description "Forwarding target requested by the original dialed channel."},
                                                           :forwarded {:required false,
                                                                       :type "Channel",
                                                                       :description "Channel that the caller has been forwarded to."},
                                                           :dialstring {:required false,
                                                                        :type "string",
                                                                        :description "The dial string for calling the peer channel."},
                                                           :dialstatus {:required true,
                                                                        :type "string",
                                                                        :description "Current status of the dialing attempt to the peer."}}},
                                       :ChannelDestroyed {:id "ChannelDestroyed",
                                                          :description "Notification that a channel has been destroyed.",
                                                          :properties {:cause {:required true,
                                                                               :description "Integer representation of the cause of the hangup",
                                                                               :type "int"},
                                                                       :cause_txt {:required true,
                                                                                   :description "Text representation of the cause of the hangup",
                                                                                   :type "string"},
                                                                       :channel {:required true, :type "Channel"}}},
                                       :PlaybackFinished {:id "PlaybackFinished",
                                                          :description "Event showing the completion of a media playback operation.",
                                                          :properties {:playback {:type "Playback",
                                                                                  :description "Playback control object",
                                                                                  :required true}}}},
                              :_author "David M. Lee, II <dlee@digium.com>",
                              :apis [{:path "/events",
                                      :description "Events from Asterisk to applications",
                                      :operations [{:httpMethod "GET",
                                                    :upgrade "websocket",
                                                    :websocketProtocol "ari",
                                                    :summary "WebSocket connection for events.",
                                                    :nickname "eventWebsocket",
                                                    :responseClass "Message",
                                                    :parameters [{:name "app",
                                                                  :description "Applications to subscribe to.",
                                                                  :paramType "query",
                                                                  :required true,
                                                                  :allowMultiple true,
                                                                  :dataType "string"}]}]}],
                              :_copyright "Copyright (C) 2012 - 2013, Digium, Inc.",
                              :apiVersion "1.0.0",
                              :basePath "http://localhost:8088/stasis"}}})


(def MINIDB {
             :ari_1 {:applications {:models "M APP 1"
                                    :apis "LE API"}
                     :bridges      {:models "MODELS"
                                    :apis "LE API"}}

             :ari_2 {:applications {:models "M APP 2"
                                    :apis "LE API"}
                     :bridges      {:models "MODELS"
                                    :apis "LE API"}
                     :zebra        {:models "MODELS"
                                    :apis "LE API"}}

             })




(deftest which-aris
  (testing "Controlla le versioni dell'ARI che ci sono nel DB di prova"
    (let [keys-db (sr/select [sr/ALL sr/FIRST] DB)]
    (is (= [:ari_0_0_1
             :ari_1_0_0] keys-db)))))

(deftest which-files
  (testing "Controlla le versioni dei files che ci sono nel DB di prova"
    (let [files (apply sorted-set
                       (sr/select [sr/MAP-VALS sr/ALL sr/FIRST] DB))]
      (is (= #{:applications :events} files)))))

(deftest all-models-for-applications-in-minidb
  (testing "Controlla le versioni dei files che ci sono nel DB di prova"
    (let [my-application :applications
          files (sr/select [sr/MAP-VALS my-application :models] MINIDB)]
      (is (= ["M APP 1" "M APP 2"] files)))))





